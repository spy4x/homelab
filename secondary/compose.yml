name: ${PROJECT}

networks:
  proxy:
    external: true

services:
  # Traefik is a reverse proxy and load balancer.
  # It is used to route incoming requests to the correct container by domain name and not by port.
  # Ex: https://movies.example.com -> jellyfin container:8096
  # Ex: https://gitea.example.com -> gitea container:3000
  # It's configured to use Let's Encrypt to automatically generate SSL certificates and redirect all HTTP requests to HTTPS.
  traefik:
    container_name: "traefik"
    image: "traefik:latest"
    restart: unless-stopped
    command:
      #      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      # - "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.email=${CONTACT_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - 443:443
      - 80:80
    volumes:
      - "./.volumes/traefik/letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - proxy
      - default
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.traefik.rule=Host(`proxy-2.${DOMAIN}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=myresolver"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
      - "traefik.http.routers.traefik.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${BASIC_AUTH_USER}:${BASIC_AUTH_PASSWORD}"

  # Uptime Kuma is a monitoring tool, that checks the status of your websites and APIs.
  uptime-kuma:
    container_name: uptime-kuma
    image: louislam/uptime-kuma
    volumes:
      - ./.volumes/uptime-kuma:/app/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.25"
    security_opt:
      - no-new-privileges:true
    networks:
      - proxy
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.uptime-kuma.rule=Host(`uptime-2.${DOMAIN}`)"
      - "traefik.http.routers.uptime-kuma.entrypoints=websecure"
      - "traefik.http.routers.uptime-kuma.tls=true"
      - "traefik.http.routers.uptime-kuma.tls.certresolver=myresolver"
      - "traefik.http.services.uptime-kuma.loadbalancer.server.port=3001"

  # Watchtower is a process for automating Docker container base image updates.
  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 2048M
    security_opt:
      - no-new-privileges:true
    command: --interval 86400 --cleanup

  syncthing:
    container_name: syncthing
    image: syncthing/syncthing:latest
    volumes:
      - ./.volumes/syncthing:/var/syncthing
      - /etc/localtime:/etc/localtime:ro
      - ${PATH_SYNC}:/sync
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4096M
          cpus: "3"
    security_opt:
      - no-new-privileges:true
    ports:
      - 8384:8384
      - 22000:22000/tcp
      - 21027:21027/udp
    networks:
      - proxy
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.syncthing.rule=Host(`sync-2.${DOMAIN}`)"
      - "traefik.http.routers.syncthing.entrypoints=websecure"
      - "traefik.http.routers.syncthing.tls=true"
      - "traefik.http.routers.syncthing.tls.certresolver=myresolver"
      - "traefik.http.services.syncthing.loadbalancer.server.port=8384"

  # Outline VPN is a self-hosted VPN solution that integrates Shadowsocks.
  # Usage: https://github.com/spy4x/outline-vpn-docker?tab=readme-ov-file#usage
  # When sharing a key, add &prefix=%13%03%03%3F to the end of the URL to make traffic more difficult to detect.
  # Download client: https://getoutline.org/en-GB/get-started/#step-3
  # shadowbox:
  #   image: diffusehyperion/outline-vpn
  #   container_name: shadowbox
  #   restart: unless-stopped
  #   volumes:
  #     - ./.volumes/shadowbox:/shadowbox/state
  #   environment:
  #     - SB_STATE_DIR=/shadowbox/state
  #     - SB_API_PREFIX=api
  #     - SB_CERTIFICATE_FILE=/shadowbox/state/shadowbox-selfsigned.crt
  #     - SB_PRIVATE_KEY_FILE=/shadowbox/state/shadowbox-selfsigned.key
  #   ports:
  #     - 8082:8082
  #     - 8082:8082/udp
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 512M
  #         cpus: "0.5"

  wireguard:
    container_name: wireguard
    image: lscr.io/linuxserver/wireguard:latest
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
      - SERVERURL=vpn.${DOMAIN}
      - SERVERPORT=51820
      - PEERS=${VPN_PEERS}
      - PEERDNS=1.1.1.1,8.8.8.8,9.9.9.9
      - LOG_CONFS=true
    volumes:
      - ./.volumes/wireguard:/config
      - /lib/modules:/lib/modules
    ports:
      - 51820:51820/udp
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M
    security_opt:
      - no-new-privileges:true
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
