name: ${PROJECT}

networks:
  proxy:
    external: true

services:
  # Traefik is a reverse proxy and load balancer.
  # It is used to route incoming requests to the correct container by domain name and not by port.
  # Ex: https://movies.example.com -> jellyfin container:8096
  # Ex: https://gitea.example.com -> gitea container:3000
  # It's configured to use Let's Encrypt to automatically generate SSL certificates and redirect all HTTP requests to HTTPS.
  proxy:
    container_name: "proxy"
    image: "traefik:latest"
    restart: unless-stopped
    command:
      # - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      # - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true" # Use HTTP-01 challenge
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web" # Use 'web' entrypoint (port 80) for the challenge
      # - "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory" # Use staging server for testing
      - "--certificatesresolvers.myresolver.acme.email=${CONTACT_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - 443:443
      - 80:80
    volumes:
      - "./.volumes/traefik/letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - proxy
      - default
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 1024M
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
      - "traefik.http.routers.traefik.rule=Host(`proxy.${DOMAIN}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=myresolver"
      - "traefik.http.routers.traefik.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${BASIC_AUTH_USER}:${BASIC_AUTH_PASSWORD}"

  # Uptime Kuma is a monitoring tool, that checks the status of your websites and APIs.
  uptime-kuma:
    container_name: uptime-kuma
    image: louislam/uptime-kuma
    volumes:
      - ./.volumes/uptime-kuma:/app/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.25"
    security_opt:
      - no-new-privileges:true
    networks:
      - proxy
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.services.uptime-kuma.loadbalancer.server.port=3001"
      - "traefik.http.routers.uptime-kuma.rule=Host(`uptime.${DOMAIN}`)"
      - "traefik.http.routers.uptime-kuma.entrypoints=websecure"
      - "traefik.http.routers.uptime-kuma.tls=true"
      - "traefik.http.routers.uptime-kuma.tls.certresolver=myresolver"

  # Transmission is a BitTorrent client with a web interface.
  # It is a lightweight, works on the server in background and has zero configuration.
  transmission:
    image: linuxserver/transmission
    container_name: transmission
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
    volumes:
      - ./.volumes/transmission:/config
      - ${PATH_MEDIA}:/downloads
    ports:
      - 51413:51413 # Default port for torrent traffic
      - 51413:51413/udp # Default port for DHT
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: "1"
    security_opt:
      - no-new-privileges:true
    networks:
      - proxy
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.services.transmission.loadbalancer.server.port=9091"
      - "traefik.http.routers.transmission.rule=Host(`torrents.${DOMAIN}`)"
      - "traefik.http.routers.transmission.entrypoints=websecure"
      - "traefik.http.routers.transmission.tls=true"
      - "traefik.http.routers.transmission.tls.certresolver=myresolver"
      - "traefik.http.routers.transmission.middlewares=auth"

  # Jellyfin is a media server for hosting and managing personal media libraries.
  # Think of movies, TV shows, home videos, music, and pictures.
  jellyfin:
    container_name: jellyfin
    image: jellyfin/jellyfin
    volumes:
      - ./.volumes/jellyfin:/config
      - ./.volumes/jellyfin/cache:/cache
      - ${PATH_MEDIA}:/media
    devices:
      - /dev/dri:/dev/dri # for GPU transcoding
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 8192M
          cpus: "3"
    security_opt:
      - no-new-privileges:true
    networks:
      - proxy
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.services.jellyfin.loadbalancer.server.port=8096"
      - "traefik.http.routers.jellyfin.rule=Host(`movies.${DOMAIN}`)"
      - "traefik.http.routers.jellyfin.entrypoints=websecure"
      - "traefik.http.routers.jellyfin.tls=true"
      - "traefik.http.routers.jellyfin.tls.certresolver=myresolver"

  # A simple HTML page to display links to all the services.
  homepage:
    container_name: homepage
    image: nginx:alpine
    volumes:
      - ./homepage/dist:/usr/share/nginx/html:ro
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.10"
    security_opt:
      - no-new-privileges:true
    networks:
      - proxy
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.services.homepage.loadbalancer.server.port=80"
      - "traefik.http.routers.homepage.rule=Host(`ui.${DOMAIN}`)"
      - "traefik.http.routers.homepage.entrypoints=websecure"
      - "traefik.http.routers.homepage.tls=true"
      - "traefik.http.routers.homepage.tls.certresolver=myresolver"

  # Vaultwarden is a password manager which is compatible with Bitwarden clients.
  vaultwarden:
    container_name: vaultwarden
    image: vaultwarden/server:latest
    environment:
      - DOMAIN=https://passwords.${DOMAIN}
    volumes:
      - ./.volumes/vaultwarden:/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
    security_opt:
      - no-new-privileges:true
    networks:
      - proxy
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.services.vaultwarden.loadbalancer.server.port=80"
      - "traefik.http.routers.vaultwarden.rule=Host(`passwords.${DOMAIN}`)"
      - "traefik.http.routers.vaultwarden.entrypoints=websecure"
      - "traefik.http.routers.vaultwarden.tls=true"
      - "traefik.http.routers.vaultwarden.tls.certresolver=myresolver"

  # Watchtower is a process for automating Docker container base image updates.
  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 2048M
    security_opt:
      - no-new-privileges:true
    command: --interval 86400 --cleanup

  wireguard:
    container_name: wireguard
    image: lscr.io/linuxserver/wireguard:latest
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
      - SERVERURL=vpn.${DOMAIN}
      - SERVERPORT=51820
      - PEERS=${VPN_PEERS}
      - PEERDNS=1.1.1.1,8.8.8.8,9.9.9.9
      - LOG_CONFS=true
    volumes:
      - ./.volumes/wireguard:/config
      - /lib/modules:/lib/modules
    ports:
      - 51820:51820/udp
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M
    security_opt:
      - no-new-privileges:true
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1

  syncthing:
    container_name: syncthing
    image: syncthing/syncthing:latest
    volumes:
      - ./.volumes/syncthing:/var/syncthing
      - /etc/localtime:/etc/localtime:ro
      - ${PATH_SYNC}:/sync
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4096M
          cpus: "3"
    security_opt:
      - no-new-privileges:true
    networks:
      - proxy
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.services.syncthing.loadbalancer.server.port=8384"
      - "traefik.http.routers.syncthing.rule=Host(`sync.${DOMAIN}`)"
      - "traefik.http.routers.syncthing.entrypoints=websecure"
      - "traefik.http.routers.syncthing.tls=true"
      - "traefik.http.routers.syncthing.tls.certresolver=myresolver"

  # Outline VPN is a self-hosted VPN solution that integrates Shadowsocks.
  # Usage: https://github.com/spy4x/outline-vpn-docker?tab=readme-ov-file#usage
  # When sharing a key, add &prefix=%13%03%03%3F to the end of the URL to make traffic more difficult to detect.
  # Download client: https://getoutline.org/en-GB/get-started/#step-3
  shadowbox:
    image: diffusehyperion/outline-vpn
    container_name: shadowbox
    restart: unless-stopped
    volumes:
      - ./.volumes/shadowbox:/shadowbox/state
    environment:
      - SB_STATE_DIR=/shadowbox/state
      - SB_API_PREFIX=api
      - SB_CERTIFICATE_FILE=/shadowbox/state/shadowbox-selfsigned.crt
      - SB_PRIVATE_KEY_FILE=/shadowbox/state/shadowbox-selfsigned.key
    ports:
      - 8082:8082
      - 8082:8082/udp
      # - 8081:8081 # Port for access key management API. Not necessary for running. Doesn't work for me for some reason.
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
    networks:
      - proxy
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.services.shadowbox.loadbalancer.server.port=8081" # Doesn't work for some reason.
      - "traefik.http.routers.shadowbox.rule=Host(`vpn-shadowbox.${DOMAIN}`)"
      - "traefik.http.routers.shadowbox.entrypoints=websecure"
      - "traefik.http.routers.shadowbox.tls=true"
      - "traefik.http.routers.shadowbox.tls.certresolver=myresolver"

  open-webui:
    container_name: open-webui
    image: ghcr.io/open-webui/open-webui:latest
    restart: unless-stopped
    volumes:
      - ./.volumes/open-webui:/app/backend/data
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
    networks:
      - proxy
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.services.open-webui.loadbalancer.server.port=8080"
      - "traefik.http.routers.open-webui.rule=Host(`ai.${DOMAIN}`)"
      - "traefik.http.routers.open-webui.entrypoints=websecure"
      - "traefik.http.routers.open-webui.tls=true"
      - "traefik.http.routers.open-webui.tls.certresolver=myresolver"

  audiobookshelf:
    container_name: audiobookshelf
    image: ghcr.io/advplyr/audiobookshelf:latest
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
    volumes:
      - ./.volumes/audiobookshelf/config:/config
      - ./.volumes/audiobookshelf/metadata:/metadata
      - ${PATH_BOOKS}:/audiobooks
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: "1"
    security_opt:
      - no-new-privileges:true
    networks:
      - proxy
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.services.audiobookshelf.loadbalancer.server.port=80"
      - "traefik.http.routers.audiobookshelf.rule=Host(`books.${DOMAIN}`)"
      - "traefik.http.routers.audiobookshelf.entrypoints=websecure"
      - "traefik.http.routers.audiobookshelf.tls=true"
      - "traefik.http.routers.audiobookshelf.tls.certresolver=myresolver"